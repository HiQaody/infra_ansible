---
- name: Installer Helm (Linux AMD64)
  become: yes
  shell: |
    curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
  args:
    creates: /usr/local/bin/helm

- name: Vérifier l'installation de Helm
  command: helm version
  register: helm_version
  changed_when: false

- name: Ajouter le repo Helm Harbor
  shell: helm repo add harbor {{ harbor_helm_repo }} && helm repo update
  args:
    executable: /bin/bash
  register: harbor_repo
  changed_when: "'harbor' in harbor_repo.stdout or 'has been added' in harbor_repo.stdout"

- name: Créer le namespace Harbor (idempotent)
  kubernetes.core.k8s:
    state: present
    api_version: v1
    kind: Namespace
    name: "{{ harbor_namespace }}"

- name: Générer le fichier de valeurs pour Harbor
  copy:
    dest: "{{ harbor_values_file }}"
    mode: "0640"
    content: |
      expose:
        type: nodePort
        tls:
          enabled: false
        nodePort:
          name: harbor
          ports:
            http:
              port: {{ harbor_nodeport }}
            https:
              port: 32443
      harborAdminPassword: "{{ harbor_admin_password }}"
      persistence:
        enabled: true
        persistentVolumeClaim:
          registry: { size: 5Gi }
          chartmuseum: { size: 5Gi }
          jobservice: { size: 1Gi }
          database: { size: 1Gi }
          redis: { size: 1Gi }
          trivy: { size: 5Gi }

- name: Installer ou mettre à jour Harbor via Helm (idempotent)
  shell: |
    helm upgrade --install {{ harbor_release_name }} harbor/harbor \
      -n {{ harbor_namespace }} -f {{ harbor_values_file }}
  args:
    executable: /bin/bash
  register: harbor_install
  changed_when: "'deployed' in harbor_install.stdout or 'upgraded' in harbor_install.stdout"
  failed_when: harbor_install.rc != 0 and 'already exists' not in (harbor_install.stderr | default(''))
